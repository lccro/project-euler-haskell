{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
module Lib where

-- import Data.Function
import Data.List
import Data.Char(digitToInt)
import Data.Numbers.Primes
import Data.Maybe

memoizedFib :: Int -> Int
memoizedFib = (map fib [0 ..] !!)
 where
  fib 0 = 0
  fib 1 = 1
  fib n = memoizedFib (n - 2) + memoizedFib (n - 1)

isPal :: (Show a) => a -> Bool
isPal n = (even . length) s && s == reverse s where s = show n

combinations :: Int -> [a] -> [[a]]
combinations k ns = filter ((k ==) . length) (subsequences ns)

p1 :: Int
p1 = sum . filter (\x -> x `mod` 3 == 0 || x `mod` 5 == 0) $ [1 .. 1000 - 1]

p2 :: Int
p2 = sum . filter even . takeWhile (< 4000000) . map memoizedFib $ [1 ..]

p3 :: Int
p3 = maximum . primeFactors $ 600851475143

-- 25164150
p6 :: Int
p6 = sq_of_sum - sum_of_squares
 where
  sq_of_sum      = sum [1 .. 100] ^ (2 :: Integer)
  sum_of_squares = sum (map (^ (2 :: Integer)) [1 .. 100])


p5 :: Int
p5 = foldl lcm 1 [1 .. 20]

p4 :: Int
p4 = maximum . filter isPal $ [ i * j | i <- [100 .. 999], j <- [i .. 999] ]

p7 :: Integer
p7 = last . take 10001 $ primes

p9 :: Integer
p9 = head
  [ i * j * k
  | i <- [1 .. 1000]
  , j <- [1 .. 1000]
  , k <- [1 .. 1000]
  , i + j + k == 1000
  , i * i + j * j == k * k
  ]

everyN :: Int -> [a] -> [[a]]
everyN n d | length d < n = []
           | otherwise    = take n d : everyN n (tail d)

-- 23514624000
p8 :: IO Int
p8 = do
  ls <- readFile "p8.txt"
  return $ go ls
 where
  go :: String -> Int
  go = maximum . map product . everyN 13 . map digitToInt . head . lines

p10 :: Integer
p10 = sum . takeWhile (< 2000000) $ primes

chop :: Int -> [a] -> [[a]]
chop _ [] = []
chop n xs = take n xs : chop n (drop n xs)

prodEveryN :: Int -> [Int] -> [Int]
prodEveryN n d | length d < n = [1]
               | otherwise    = product (take n d) : prodEveryN n (tail d)

-- 70600674
p11 :: IO Int
p11 = do
  ls <- readFile "p11.txt"
  return $ go ls
 where
  go :: String -> Int
  go ls =
    let matrix      = chop 20 . map read . words $ ls
        byDiagonals = maximum . map (maximum . prodEveryN 4) $ diagonals matrix
        byColumns   = maximum . map (maximum . prodEveryN 4) $ transpose matrix
        byLines     = maximum . map (maximum . prodEveryN 4) $ matrix
    in  maximum [byLines, byColumns, byDiagonals]
  diagonals []         = []
  diagonals ([] : xss) = xss
  diagonals xss        = zipWith (++)
                                 (map ((: []) . head) xss ++ repeat [])
                                 ([] : diagonals (map tail xss))

-- 1366
p16 :: Int
p16 = sum . map digitToInt . show $ (2 :: Integer) ^ (1000 :: Integer)

-- 837799
p14 :: Int
p14 = snd . maximum $ zip (map (collatz 0) [1 .. 1000000]) [1 .. 1000000]
 where
  collatz :: Int -> Int -> Int
  collatz _ 0 = error "Impossibru"
  collatz l 1 = 1 + l
  collatz l n = collatz (l + 1) (nxt n)
   where
    nxt :: Int -> Int
    nxt i | even i    = div i 2
          | otherwise = 3 * i + 1

-- 5537376230
p13 :: Integer
p13 = read . take 10 . show . sum . map (read :: String->Integer) . words $ input
  where input ="37107287533902102798797998220837590246510135740250 \
\46376937677490009712648124896970078050417018260538 \
\74324986199524741059474233309513058123726617309629 \
\91942213363574161572522430563301811072406154908250 \
\23067588207539346171171980310421047513778063246676 \
\89261670696623633820136378418383684178734361726757 \
\28112879812849979408065481931592621691275889832738 \
\44274228917432520321923589422876796487670272189318 \
\47451445736001306439091167216856844588711603153276 \
\70386486105843025439939619828917593665686757934951 \
\62176457141856560629502157223196586755079324193331 \
\64906352462741904929101432445813822663347944758178 \
\92575867718337217661963751590579239728245598838407 \
\58203565325359399008402633568948830189458628227828 \
\80181199384826282014278194139940567587151170094390 \
\35398664372827112653829987240784473053190104293586 \
\86515506006295864861532075273371959191420517255829 \
\71693888707715466499115593487603532921714970056938 \
\54370070576826684624621495650076471787294438377604 \
\53282654108756828443191190634694037855217779295145 \
\36123272525000296071075082563815656710885258350721 \
\45876576172410976447339110607218265236877223636045 \
\17423706905851860660448207621209813287860733969412 \
\81142660418086830619328460811191061556940512689692 \
\51934325451728388641918047049293215058642563049483 \
\62467221648435076201727918039944693004732956340691 \
\15732444386908125794514089057706229429197107928209 \
\55037687525678773091862540744969844508330393682126 \
\18336384825330154686196124348767681297534375946515 \
\80386287592878490201521685554828717201219257766954 \
\78182833757993103614740356856449095527097864797581 \
\16726320100436897842553539920931837441497806860984 \
\48403098129077791799088218795327364475675590848030 \
\87086987551392711854517078544161852424320693150332 \
\59959406895756536782107074926966537676326235447210 \
\69793950679652694742597709739166693763042633987085 \
\41052684708299085211399427365734116182760315001271 \
\65378607361501080857009149939512557028198746004375 \
\35829035317434717326932123578154982629742552737307 \
\94953759765105305946966067683156574377167401875275 \
\88902802571733229619176668713819931811048770190271 \
\25267680276078003013678680992525463401061632866526 \
\36270218540497705585629946580636237993140746255962 \
\24074486908231174977792365466257246923322810917141 \
\91430288197103288597806669760892938638285025333403 \
\34413065578016127815921815005561868836468420090470 \
\23053081172816430487623791969842487255036638784583 \
\11487696932154902810424020138335124462181441773470 \
\63783299490636259666498587618221225225512486764533 \
\67720186971698544312419572409913959008952310058822 \
\95548255300263520781532296796249481641953868218774 \
\76085327132285723110424803456124867697064507995236 \
\37774242535411291684276865538926205024910326572967 \
\23701913275725675285653248258265463092207058596522 \
\29798860272258331913126375147341994889534765745501 \
\18495701454879288984856827726077713721403798879715 \
\38298203783031473527721580348144513491373226651381 \
\34829543829199918180278916522431027392251122869539 \
\40957953066405232632538044100059654939159879593635 \
\29746152185502371307642255121183693803580388584903 \
\41698116222072977186158236678424689157993532961922 \
\62467957194401269043877107275048102390895523597457 \
\23189706772547915061505504953922979530901129967519 \
\86188088225875314529584099251203829009407770775672 \
\11306739708304724483816533873502340845647058077308 \
\82959174767140363198008187129011875491310547126581 \
\97623331044818386269515456334926366572897563400500 \
\42846280183517070527831839425882145521227251250327 \
\55121603546981200581762165212827652751691296897789 \
\32238195734329339946437501907836945765883352399886 \
\75506164965184775180738168837861091527357929701337 \
\62177842752192623401942399639168044983993173312731 \
\32924185707147349566916674687634660915035914677504 \
\99518671430235219628894890102423325116913619626622 \
\73267460800591547471830798392868535206946944540724 \
\76841822524674417161514036427982273348055556214818 \
\97142617910342598647204516893989422179826088076852 \
\87783646182799346313767754307809363333018982642090 \
\10848802521674670883215120185883543223812876952786 \
\71329612474782464538636993009049310363619763878039 \
\62184073572399794223406235393808339651327408011116 \
\66627891981488087797941876876144230030984490851411 \
\60661826293682836764744779239180335110989069790714 \
\85786944089552990653640447425576083659976645795096 \
\66024396409905389607120198219976047599490197230297 \
\64913982680032973156037120041377903785566085089252 \
\16730939319872750275468906903707539413042652315011 \
\94809377245048795150954100921645863754710598436791 \
\78639167021187492431995700641917969777599028300699 \
\15368713711936614952811305876380278410754449733078 \
\40789923115535562561142322423255033685442488917353 \
\44889911501440648020369068063960672322193204149535 \
\41503128880339536053299340368006977710650566631954 \
\81234880673210146739058568557934581403627822703280 \
\82616570773948327592232845941706525094512325230608 \
\22918802058777319719839450180888072429661980811197 \
\77158542502016545090413245809786882778948721859617 \
\72107838435069186155435662884062257473692284509516 \
\20849603980134001723930671666823555245252804609722 \
\53503534226472524250874054075591789781264330331690"

-- 76576500 (4s!)
p12 :: Int
p12 =
  triangular
    . maybe 0 (+ 1)
    . findIndex (> 500)
    . map (factors . triangular)
    $ [1 ..]
 where
  factors :: Int -> Int
  factors n = 2 * fromIntegral y - 1
   where
    y = length [ i | i <- [1 .. u], mod n i == 0 ]
    u :: Int
    u = round . sqrt @Double . fromIntegral $ n
  triangular x = x * (x + 1) `div` 2

factorial :: Integer -> Integer
factorial n = product [1 .. n]

-- 648
p20 :: Int
p20 = sum . map digitToInt . show . factorial $ 100

-- 137846528820
p15 :: Integer
p15 = binomial (20 + 20) 20
  where binomial n k = factorial n `div` factorial k `div` factorial (n - k)

-- 4782
p25 :: Int
p25 = fromMaybe 0 . findIndex (> (10 :: Integer) ^ (999 :: Integer)) $ fibs
  where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

-- 21124
p17 :: Int
p17 = length . concatMap decompose $ [1 .. 1000]
 where
  one =
    [ "one"
    , "two"
    , "three"
    , "four"
    , "five"
    , "six"
    , "seven"
    , "eight"
    , "nine"
    , "ten"
    , "eleven"
    , "twelve"
    , "thirteen"
    , "fourteen"
    , "fifteen"
    , "sixteen"
    , "seventeen"
    , "eighteen"
    , "nineteen"
    ]
  ty =
    [ "twenty"
    , "thirty"
    , "forty"
    , "fifty"
    , "sixty"
    , "seventy"
    , "eighty"
    , "ninety"
    ]
  decompose x
    | x == 0 = []
    | x < 20 = one !! (x - 1)
    | x >= 20 && x < 100 = ty !! (firstDigit x - 2) ++ decompose (x `mod` 10 :: Int)
    | x < 1000 && x `mod` 100 == 0 = one !! (firstDigit x - 1) ++ "hundred"
    | x > 100 && x <= 999 =  one !! (firstDigit x - 1) ++ "hundredand" ++ decompose (x `mod` 100 :: Int)
    | x == 1000 = "onethousand"
    | otherwise = error "Impossibru"
    where firstDigit = digitToInt . head . show

-- 31626
p21 :: Int
p21 = sum $ [ x | x <- [2 .. 10000], let b = d x in b /= x && d b == x ]
  where
    d n = sum $ [ x | x <- [1 .. (n - 1)], n `rem` x == 0 ]

--
pCurrent :: Int
pCurrent = 0

